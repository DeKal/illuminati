buildscript {
	ext {
		springBootVersion = '2.2.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'war'
	id 'checkstyle'
	id 'jacoco'
	id "net.researchgate.release" version "2.8.1"
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
	id "com.github.node-gradle.node" version "2.0.0"
}

group = 'com.dawn.jat'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
	finalizedBy(jacocoTestReport)
}

checkstyle {
	toolVersion '8.27'
	configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
}
checkstyleMain {
	source ='src/main/java'
}
checkstyleTest {
	source ='src/test/java'
}

tasks.withType(Checkstyle) {
	reports {
		html.enabled true
		html.destination rootProject.file("build/reports/checkstyle.html")
	}
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco/test")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.1
			}
		}

		rule {
			element = 'CLASS'
			includes = ['com.dawn.jat.*']
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				minimum = 0.1
			}
		}
	}
}


task generateGitChangelogMinimal(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = new File("CHANGELOG.md");
}

sourceSets {
	main.java.srcDirs = ['src/main/java']
}

node {
	// Version of node to use.
	version = '12.14.1'
	// Enabled the automatic download.
	download = true
}

task yarnInstall(type: YarnTask) {
	workingDir = file('./cms')
}

task buildCms(type: YarnTask) {
	dependsOn yarnInstall
	// add the express package only
	args = ['build']
	workingDir = file('./cms')
}


task moveCmsTemplate(type: Copy) {
	dependsOn buildCms
	from file("./cms/build/")
	include "index.html"
	into file("$buildDir/resources/main/templates/cms")
}

task moveStaticAsset(type: Copy) {
	dependsOn buildCms
	from file("./cms/build/")
	include "**/*"
	exclude "index.html"
	into file("$buildDir/resources/main/static/")
}

bootWar {
	dependsOn moveStaticAsset
	dependsOn moveCmsTemplate
}

bootRun {
	dependsOn moveStaticAsset
	dependsOn moveCmsTemplate
}