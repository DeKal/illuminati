plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'war'
	id 'checkstyle'
	id "com.github.spotbugs" version "3.0.0"
}

group = 'com.dawn.'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

test {
	useJUnitPlatform()
}

checkstyle {
	toolVersion '8.27'
	configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
}
checkstyleMain {
	source ='src/main/java'
}
checkstyleTest {
	source ='src/test/java'
}

tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
		html.destination rootProject.file("build/reports/checkstyle.html")
	}
}

sourceSets {
	// we define `main` sourceSet here, so SpotBugs Gradle Plugin generates `spotbugsMain` task
	main {
		java.srcDirs = ['src/main/java']
	}
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
	// configure automatically generated tasks
}