// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Time should render correctly 1`] = `
<div
  data-test-id="theme-wrapper"
>
  <Time
    time={1588993682}
  >
    <MuiPickersUtilsProvider
      utils={[Function]}
    >
      <Styled(PickerWithState)
        KeyboardButtonProps={
          Object {
            "aria-label": "change date",
          }
        }
        disableToolbar={true}
        format="dd/MM/yyyy"
        fullWidth={true}
        label="Time"
        margin="normal"
        required={true}
        value={1588993682}
        variant="inline"
      >
        <PickerWithState
          KeyboardButtonProps={
            Object {
              "aria-label": "change date",
            }
          }
          allowKeyboardControl={true}
          className="PickerWithState-root-1 PickerWithState-root-2"
          disableToolbar={true}
          format="dd/MM/yyyy"
          fullWidth={true}
          invalidDateMessage="Invalid Date Format"
          label="Time"
          margin="normal"
          maxDate={2100-01-01T00:00:00.000Z}
          maxDateMessage="Date should not be after maximal date"
          minDate={1900-01-01T00:00:00.000Z}
          minDateMessage="Date should not be before minimal date"
          openTo="date"
          required={true}
          value={1588993682}
          variant="inline"
          views={
            Array [
              "year",
              "date",
            ]
          }
        >
          <Wrapper
            DateInputProps={
              Object {
                "format": "dd/MM/yyyy",
                "inputValue": "19/01/1970",
                "onChange": [Function],
                "openPicker": [Function],
                "validationError": "",
              }
            }
            InputComponent={[Function]}
            KeyboardButtonProps={
              Object {
                "aria-label": "change date",
              }
            }
            className="PickerWithState-root-1 PickerWithState-root-2"
            format="dd/MM/yyyy"
            fullWidth={true}
            label="Time"
            margin="normal"
            onAccept={[Function]}
            onClear={[Function]}
            onDismiss={[Function]}
            onSetToday={[Function]}
            open={false}
            required={true}
            variant="inline"
          >
            <InlineWrapper
              DateInputProps={
                Object {
                  "format": "dd/MM/yyyy",
                  "inputValue": "19/01/1970",
                  "onChange": [Function],
                  "openPicker": [Function],
                  "validationError": "",
                }
              }
              InputComponent={[Function]}
              KeyboardButtonProps={
                Object {
                  "aria-label": "change date",
                }
              }
              className="PickerWithState-root-1 PickerWithState-root-2"
              format="dd/MM/yyyy"
              fullWidth={true}
              label="Time"
              margin="normal"
              onAccept={[Function]}
              onClear={[Function]}
              onDismiss={[Function]}
              onSetToday={[Function]}
              open={false}
              required={true}
            >
              <KeyboardDateInput
                KeyboardButtonProps={
                  Object {
                    "aria-label": "change date",
                  }
                }
                className="PickerWithState-root-1 PickerWithState-root-2"
                format="dd/MM/yyyy"
                fullWidth={true}
                inputRef={
                  Object {
                    "current": <input
                      aria-invalid="false"
                      class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                      required=""
                      type="text"
                      value="19/01/1970"
                    />,
                  }
                }
                inputValue="19/01/1970"
                keyboardIcon={<KeyboardIcon />}
                label="Time"
                margin="normal"
                onChange={[Function]}
                openPicker={[Function]}
                required={true}
                validationError=""
              >
                <Rifm
                  format={[Function]}
                  key="__/__/____"
                  onChange={[Function]}
                  refuse={/\\[\\^\\\\d\\]\\+/gi}
                  value="19/01/1970"
                >
                  <WithStyles(ForwardRef(TextField))
                    InputProps={
                      Object {
                        "endAdornment": <ForwardRef(WithStyles)
                          position="end"
                        >
                          <ForwardRef(WithStyles)
                            aria-label="change date"
                            onClick={[Function]}
                          >
                            <KeyboardIcon />
                          </ForwardRef(WithStyles)>
                        </ForwardRef(WithStyles)>,
                      }
                    }
                    className="PickerWithState-root-1 PickerWithState-root-2"
                    fullWidth={true}
                    helperText=""
                    inputRef={
                      Object {
                        "current": <input
                          aria-invalid="false"
                          class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                          required=""
                          type="text"
                          value="19/01/1970"
                        />,
                      }
                    }
                    label="Time"
                    margin="normal"
                    onChange={[Function]}
                    required={true}
                    value="19/01/1970"
                  >
                    <ForwardRef(TextField)
                      InputProps={
                        Object {
                          "endAdornment": <ForwardRef(WithStyles)
                            position="end"
                          >
                            <ForwardRef(WithStyles)
                              aria-label="change date"
                              onClick={[Function]}
                            >
                              <KeyboardIcon />
                            </ForwardRef(WithStyles)>
                          </ForwardRef(WithStyles)>,
                        }
                      }
                      className="PickerWithState-root-1 PickerWithState-root-2"
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      fullWidth={true}
                      helperText=""
                      inputRef={
                        Object {
                          "current": <input
                            aria-invalid="false"
                            class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                            required=""
                            type="text"
                            value="19/01/1970"
                          />,
                        }
                      }
                      label="Time"
                      margin="normal"
                      onChange={[Function]}
                      required={true}
                      value="19/01/1970"
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root PickerWithState-root-1 PickerWithState-root-2"
                        color="primary"
                        disabled={false}
                        error={false}
                        fullWidth={true}
                        margin="normal"
                        required={true}
                        variant="standard"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root PickerWithState-root-1 PickerWithState-root-2"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          color="primary"
                          disabled={false}
                          error={false}
                          fullWidth={true}
                          margin="normal"
                          required={true}
                          variant="standard"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root PickerWithState-root-1 PickerWithState-root-2 MuiFormControl-marginNormal MuiFormControl-fullWidth"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={true}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={true}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled Mui-required Mui-required"
                                      data-shrink={true}
                                    >
                                      Time
                                      <span
                                        aria-hidden={true}
                                        className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                      >
                                         
                                        *
                                      </span>
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(Input))
                              autoFocus={false}
                              endAdornment={
                                <ForwardRef(WithStyles)
                                  position="end"
                                >
                                  <ForwardRef(WithStyles)
                                    aria-label="change date"
                                    onClick={[Function]}
                                  >
                                    <KeyboardIcon />
                                  </ForwardRef(WithStyles)>
                                </ForwardRef(WithStyles)>
                              }
                              fullWidth={true}
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-invalid="false"
                                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                    required=""
                                    type="text"
                                    value="19/01/1970"
                                  />,
                                }
                              }
                              multiline={false}
                              onChange={[Function]}
                              value="19/01/1970"
                            >
                              <ForwardRef(Input)
                                autoFocus={false}
                                classes={
                                  Object {
                                    "colorSecondary": "MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInput-formControl",
                                    "fullWidth": "MuiInput-fullWidth",
                                    "input": "MuiInput-input",
                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInput-marginDense",
                                    "multiline": "MuiInput-multiline",
                                    "root": "MuiInput-root",
                                    "underline": "MuiInput-underline",
                                  }
                                }
                                endAdornment={
                                  <ForwardRef(WithStyles)
                                    position="end"
                                  >
                                    <ForwardRef(WithStyles)
                                      aria-label="change date"
                                      onClick={[Function]}
                                    >
                                      <KeyboardIcon />
                                    </ForwardRef(WithStyles)>
                                  </ForwardRef(WithStyles)>
                                }
                                fullWidth={true}
                                inputRef={
                                  Object {
                                    "current": <input
                                      aria-invalid="false"
                                      class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                      required=""
                                      type="text"
                                      value="19/01/1970"
                                    />,
                                  }
                                }
                                multiline={false}
                                onChange={[Function]}
                                value="19/01/1970"
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "colorSecondary": "MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInput-formControl",
                                      "fullWidth": "MuiInput-fullWidth",
                                      "input": "MuiInput-input",
                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInput-marginDense",
                                      "multiline": "MuiInput-multiline",
                                      "root": "MuiInput-root MuiInput-underline",
                                      "underline": null,
                                    }
                                  }
                                  endAdornment={
                                    <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        aria-label="change date"
                                        onClick={[Function]}
                                      >
                                        <KeyboardIcon />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>
                                  }
                                  fullWidth={true}
                                  inputComponent="input"
                                  inputRef={
                                    Object {
                                      "current": <input
                                        aria-invalid="false"
                                        class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                        required=""
                                        type="text"
                                        value="19/01/1970"
                                      />,
                                    }
                                  }
                                  multiline={false}
                                  onChange={[Function]}
                                  type="text"
                                  value="19/01/1970"
                                >
                                  <ForwardRef(InputBase)
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart",
                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                        "input": "MuiInputBase-input MuiInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                      }
                                    }
                                    endAdornment={
                                      <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          aria-label="change date"
                                          onClick={[Function]}
                                        >
                                          <KeyboardIcon />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>
                                    }
                                    fullWidth={true}
                                    inputComponent="input"
                                    inputRef={
                                      Object {
                                        "current": <input
                                          aria-invalid="false"
                                          class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                          required=""
                                          type="text"
                                          value="19/01/1970"
                                        />,
                                      }
                                    }
                                    multiline={false}
                                    onChange={[Function]}
                                    type="text"
                                    value="19/01/1970"
                                  >
                                    <div
                                      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                      onClick={[Function]}
                                    >
                                      <input
                                        aria-invalid={false}
                                        autoFocus={false}
                                        className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                        disabled={false}
                                        onAnimationStart={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={true}
                                        type="text"
                                        value="19/01/1970"
                                      />
                                      <WithStyles(ForwardRef(InputAdornment))
                                        position="end"
                                      >
                                        <ForwardRef(InputAdornment)
                                          classes={
                                            Object {
                                              "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                              "filled": "MuiInputAdornment-filled",
                                              "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                              "marginDense": "MuiInputAdornment-marginDense",
                                              "positionEnd": "MuiInputAdornment-positionEnd",
                                              "positionStart": "MuiInputAdornment-positionStart",
                                              "root": "MuiInputAdornment-root",
                                            }
                                          }
                                          position="end"
                                        >
                                          <div
                                            className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                          >
                                            <WithStyles(ForwardRef(IconButton))
                                              aria-label="change date"
                                              onClick={[Function]}
                                            >
                                              <ForwardRef(IconButton)
                                                aria-label="change date"
                                                classes={
                                                  Object {
                                                    "colorInherit": "MuiIconButton-colorInherit",
                                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                                    "edgeStart": "MuiIconButton-edgeStart",
                                                    "label": "MuiIconButton-label",
                                                    "root": "MuiIconButton-root",
                                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                                  }
                                                }
                                                onClick={[Function]}
                                              >
                                                <WithStyles(ForwardRef(ButtonBase))
                                                  aria-label="change date"
                                                  centerRipple={true}
                                                  className="MuiIconButton-root"
                                                  disabled={false}
                                                  focusRipple={true}
                                                  onClick={[Function]}
                                                >
                                                  <ForwardRef(ButtonBase)
                                                    aria-label="change date"
                                                    centerRipple={true}
                                                    className="MuiIconButton-root"
                                                    classes={
                                                      Object {
                                                        "disabled": "Mui-disabled",
                                                        "focusVisible": "Mui-focusVisible",
                                                        "root": "MuiButtonBase-root",
                                                      }
                                                    }
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                  >
                                                    <button
                                                      aria-label="change date"
                                                      className="MuiButtonBase-root MuiIconButton-root"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onDragLeave={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      onMouseDown={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                      tabIndex={0}
                                                      type="button"
                                                    >
                                                      <span
                                                        className="MuiIconButton-label"
                                                      >
                                                        <KeyboardIcon>
                                                          <WithStyles(ForwardRef(SvgIcon))>
                                                            <ForwardRef(SvgIcon)
                                                              classes={
                                                                Object {
                                                                  "colorAction": "MuiSvgIcon-colorAction",
                                                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                  "colorError": "MuiSvgIcon-colorError",
                                                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                  "root": "MuiSvgIcon-root",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden={true}
                                                                className="MuiSvgIcon-root"
                                                                focusable="false"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <path
                                                                  d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                                                                />
                                                                <path
                                                                  d="M0 0h24v24H0z"
                                                                  fill="none"
                                                                />
                                                              </svg>
                                                            </ForwardRef(SvgIcon)>
                                                          </WithStyles(ForwardRef(SvgIcon))>
                                                        </KeyboardIcon>
                                                      </span>
                                                      <WithStyles(memo)
                                                        center={true}
                                                      >
                                                        <ForwardRef(TouchRipple)
                                                          center={true}
                                                          classes={
                                                            Object {
                                                              "child": "MuiTouchRipple-child",
                                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                                              "ripple": "MuiTouchRipple-ripple",
                                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                              "root": "MuiTouchRipple-root",
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            className="MuiTouchRipple-root"
                                                          >
                                                            <TransitionGroup
                                                              childFactory={[Function]}
                                                              component={null}
                                                              exit={true}
                                                            />
                                                          </span>
                                                        </ForwardRef(TouchRipple)>
                                                      </WithStyles(memo)>
                                                    </button>
                                                  </ForwardRef(ButtonBase)>
                                                </WithStyles(ForwardRef(ButtonBase))>
                                              </ForwardRef(IconButton)>
                                            </WithStyles(ForwardRef(IconButton))>
                                          </div>
                                        </ForwardRef(InputAdornment)>
                                      </WithStyles(ForwardRef(InputAdornment))>
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(Input)>
                            </WithStyles(ForwardRef(Input))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                </Rifm>
              </KeyboardDateInput>
              <WithStyles(ForwardRef(Popover))
                anchorOrigin={
                  Object {
                    "horizontal": "center",
                    "vertical": "bottom",
                  }
                }
                onClose={[Function]}
                open={false}
                transformOrigin={
                  Object {
                    "horizontal": "center",
                    "vertical": "top",
                  }
                }
              >
                <ForwardRef(Popover)
                  anchorOrigin={
                    Object {
                      "horizontal": "center",
                      "vertical": "bottom",
                    }
                  }
                  classes={
                    Object {
                      "paper": "MuiPopover-paper",
                      "root": "MuiPopover-root",
                    }
                  }
                  onClose={[Function]}
                  open={false}
                  transformOrigin={
                    Object {
                      "horizontal": "center",
                      "vertical": "top",
                    }
                  }
                >
                  <ForwardRef(Modal)
                    BackdropProps={
                      Object {
                        "invisible": true,
                      }
                    }
                    className="MuiPopover-root"
                    onClose={[Function]}
                    open={false}
                  />
                </ForwardRef(Popover)>
              </WithStyles(ForwardRef(Popover))>
            </InlineWrapper>
          </Wrapper>
        </PickerWithState>
      </Styled(PickerWithState)>
    </MuiPickersUtilsProvider>
  </Time>
</div>
`;
