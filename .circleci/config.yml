# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: ./gradlew clean check
      - run: ./gradlew jacocoTestCoverageVerification
      - codecov/upload:
          file: build/reports/jacoco/test/jacocoTestReport.xml
      - store_artifacts:
          path: build/reports/tests/test
          destination: /
      - store_test_results:
          path: build/test-results
  check-danger:
    docker:
      # specify the version you desire here
      - image: circleci/node:12

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented atcheck https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: "Setup custom environment variables"
          command: |
            echo 'export DANGER_TEST_REPO="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"' >> $BASH_ENV
            echo 'export DANGER_TEST_PR="$CIRCLE_PULL_REQUEST"' >> $BASH_ENV
      # Run a step to print what branch our code base is on.
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "danger/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: cd danger && yarn install

      - save_cache:
          paths:
            - danger/node_modules
          key: v1-dependencies-{{ checksum "danger/package.json" }}
      - run: cd danger && yarn danger ci
workflows:
  version: 2.1
  build_and_test:
    jobs:
      - build:
        filters:
          branches:
            ignore:
              - /cms.*/
      - check-danger